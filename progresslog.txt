How do I find julia.h? Can't work for both C and Go.
    /usr/local/julia/share/julia/julia-config.jl --cflags --ldflags --ldlibs | xargs cc julia.c
    generated C flags:
-std=gnu99 -I'/Applications/Julia-1.0.app/Contents/Resources/julia/include/julia' -DJULIA_ENABLE_THREADING=1 -fPIC
-L'/Applications/Julia-1.0.app/Contents/Resources/julia/lib' -Wl,-rpath,'/Applications/Julia-1.0.app/Contents/Resources/julia/lib' -Wl,-rpath,'/Applications/Julia-1.0.app/Contents/Resources/julia/lib/julia' -ljulia

Got a go program to interpet Julia code, but if I input any invalid julia code it fails silently (i.e. the exceptions are not printed). The julia manual mentions that you can check for and print any exceptions with
	if jl_exception_occurred() {
		// printf("%s \n", jl_typeof_str(jl_exception_occurred()));
	}
but I just get an error while compiling that `jl_exception_occurred` is undefined.
	julia/julia.go:32:5: undefined: jl_exception_occurred

    Figured it out, I need to prepend every call to jl_... function with C. because that's the namespace where the functions are located. Now I get a different error:
    non-bool _Cfunc_jl_exception_occurred() (type *_Ctype_struct__jl_value_t) used as if condition
    - Go obviously doesn't handle booleans loosely like C, where only 0 and null are false and everything else is true. However I can't figure out what is the return type of C.jl_exception_occurred() is supposed to be, so I don't know how to check for the exception status.

    I encountered another problem: go programs may cross compile on my computer but will it include a portable version of the Julia binary? It's a deal breaker if I have to ask the end user to install Julia on their computer as well, this is supposed to be a batteries-included solution.
    Instead, I will explore using the github.com/robertkrimen/otto package which is a javascript parser and interpeter written natively in Go. Which means it can definitely cross-compile to a standalone binary as a final result.

tview works, otto works. Now I need to figure out how to take in a user input via tview and pass it into otto then print the result.
    I can't figure out how to enter arbitrary text into tview's flexboxes. None of their flexbox functions pertain to adding text, which leads me to think that you're supposed to add text with native go or tcell. But how, /I don't know/. If i'm defining everything in terms of tview widgets how do I call go's fmt.Scanf for a particular widget?
    Even more worryingly, there doesn't seem to be a multi-line field, only one-line form fields. I want the user to enter text, but not into a special form. I want them to add text into their own.

I think I have a better idea of how the gui and views work in gocui. It's actually fairly simple, and the examples are waayyyy more expressive and helpful than tview's.

--- gocui started ---

Tentatively here's the UI structure: Focus will be split between two modes, 'lesson' and 'interpreter'.
    Pressing Ctrl+2 will bring 'lesson' to the top
    Pressing Ctrl+3 will bring 'interpreter' to the top
    'lesson' is made of two side-by-side views.
        The first one is where the questions appear, and is not editable by the user.
        The second view is where the user types in his responses and where the answers appear as well.
            possible feature: determine whether the user's answer was correct and alter the response accordingly.
    'interpreter' is simply a single view, a simple REPL prompt.

✗ Create a view called 'interpreter' which acts as a basic js interpreter.
    It simply passes user input to the otto js VM and prints the results that the js VM spits out.
◦ Basic repl set up, but values do not seem to be printed to the right window.
    If I define a function add(x,y) {return x+y}, calling add(3,4) prints nothing. But if I instead say function add(x,y) {console.log(x+y)}, the values get printed in the repl_textbox, not the repl_window.
    What's worse is that I seem to have no control over the console.logged string; clearing the repl_textbox does not seem to clear the console.logged string, and so I also have no way to extract them and dump them to the repl_window as a hacky workaround.
        I think it's because the console.log happens after the enter event is finished, so nothing I do in the enter event handler will affect the console.log string.
        • I've spent a few hours on this problem and I can't solve it. No matter what, the gocui API only provides 'view.clear()' to clear a view buffer and if that doesn't work, I'm fucked. I simply have no control over the behavior of otto's console.log and it seems like it blatantly ignores any view semantics of gocui.
            • console.log is well and truly borked, can I even claim that it can teach javascript it can't even print strings?
            • Investigating tcell now. It is VERY low level, I don't even know how events are being intercepted.

✗ Create two side-by-side views. The first one view prints an uneditable paragraph, the second view allows the user to write anything in the buffer. Each time the user presses Enter, the first view prints another paragraph, properly aligned with where the user's cursor is in the second view buffer.
